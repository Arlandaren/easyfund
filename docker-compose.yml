version: '3.8'

networks:
  app:
    driver: bridge

volumes:
  pg_data:
  grafana_data:
  loki_data:
  minio_data:

services:
  # ============================================
  # Core Application Service
  # ============================================
  app_service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: easyfund_app
    restart: always
    environment:
      - PG_STRING=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
      - HTTP_ADDRESS=:8080
      - GRPC_ADDRESS=:9000
      - REDIS_ADDRESS=redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_SSL=false
    volumes:
      - .:/app
    depends_on:
      - postgres
      - redis
      - minio
    ports:
      - "8080:8080"
      - "9000:9000"
    networks:
      - app
    labels:
      loki: 'true'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============================================
  # PostgreSQL Database
  # ============================================
  postgres:
    image: postgres:15-alpine
    container_name: easyfund_postgres
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - pg_data:/var/lib/postgresql/data/pgdata
    ports:
      - "5434:5432"
    networks:
      - app
    labels:
      loki: 'true'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # Redis Cache
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: easyfund_redis
    restart: always
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    ports:
      - "6378:6379"
    networks:
      - app
    labels:
      loki: 'true'
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ============================================
  # MinIO Object Storage
  # ============================================
  minio:
    image: minio/minio:latest
    container_name: easyfund_minio
    restart: always
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    ports:
      - "9002:9000"
      - "9003:9001"
    command: server /data --console-address ":9001"
    networks:
      - app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # ============================================
  # NGINX Reverse Proxy
  # ============================================
  nginx:
    image: nginx:alpine
    container_name: easyfund_nginx
    restart: always
    volumes:
      - ./nginx.shield.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8081:81"
      - "8082:82"
    depends_on:
      - app_service
    networks:
      - app
    labels:
      loki: 'true'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:82/nginx_status"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ============================================
  # Monitoring: Prometheus
  # ============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: easyfund_prometheus
    restart: always
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    depends_on:
      - nginx-exporter
      - app_service
    networks:
      - app
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # ============================================
  # Monitoring: NGINX Exporter
  # ============================================
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: easyfund_nginx_exporter
    restart: always
    ports:
      - "9113:9113"
    command:
      - '-nginx.scrape-uri=http://nginx:82/nginx_status'
      - '-web.listen-address=:9113'
      - '-web.telemetry-path=/metrics'
    depends_on:
      - nginx
    networks:
      - app

  # ============================================
  # Logging: Loki
  # ============================================
  loki:
    image: grafana/loki:2.9.3
    container_name: easyfund_loki
    restart: always
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - app
    user: "root"

  # ============================================
  # Logging: Promtail
  # ============================================
  promtail:
    image: grafana/promtail:2.9.3
    container_name: easyfund_promtail
    restart: always
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./promtail-config.yaml:/etc/promtail/promtail.yaml:ro
    command: -config.file=/etc/promtail/promtail.yaml
    depends_on:
      - loki
    networks:
      - app

  # ============================================
  # Visualization: Grafana
  # ============================================
  grafana:
    image: grafana/grafana:latest
    container_name: easyfund_grafana
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/dashboards/:/etc/grafana/provisioning/dashboards/:ro
      - ./grafana/provisioning/datasources/:/etc/grafana/provisioning/datasources/:ro
      - ./grafana/dashboards/:/var/lib/grafana/dashboards/:ro
    depends_on:
      - prometheus
      - loki
    networks:
      - app
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
