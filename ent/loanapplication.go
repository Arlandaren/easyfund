// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Arlandaren/easyfund/ent/loanapplication"
)

// LoanApplication is the model entity for the LoanApplication schema.
type LoanApplication struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// Purpose holds the value of the "purpose" field.
	Purpose string `json:"purpose,omitempty"`
	// FinancialInfo holds the value of the "financial_info" field.
	FinancialInfo string `json:"financial_info,omitempty"`
	// Status holds the value of the "status" field.
	Status loanapplication.Status `json:"status,omitempty"`
	// ApprovalProgress holds the value of the "approval_progress" field.
	ApprovalProgress map[string]string `json:"approval_progress,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LoanApplication) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case loanapplication.FieldApprovalProgress:
			values[i] = new([]byte)
		case loanapplication.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case loanapplication.FieldID, loanapplication.FieldUserID, loanapplication.FieldPurpose, loanapplication.FieldFinancialInfo, loanapplication.FieldStatus:
			values[i] = new(sql.NullString)
		case loanapplication.FieldCreatedAt, loanapplication.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LoanApplication fields.
func (_m *LoanApplication) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case loanapplication.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case loanapplication.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_m.UserID = value.String
			}
		case loanapplication.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				_m.Amount = value.Float64
			}
		case loanapplication.FieldPurpose:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field purpose", values[i])
			} else if value.Valid {
				_m.Purpose = value.String
			}
		case loanapplication.FieldFinancialInfo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field financial_info", values[i])
			} else if value.Valid {
				_m.FinancialInfo = value.String
			}
		case loanapplication.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = loanapplication.Status(value.String)
			}
		case loanapplication.FieldApprovalProgress:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field approval_progress", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.ApprovalProgress); err != nil {
					return fmt.Errorf("unmarshal field approval_progress: %w", err)
				}
			}
		case loanapplication.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case loanapplication.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LoanApplication.
// This includes values selected through modifiers, order, etc.
func (_m *LoanApplication) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this LoanApplication.
// Note that you need to call LoanApplication.Unwrap() before calling this method if this LoanApplication
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *LoanApplication) Update() *LoanApplicationUpdateOne {
	return NewLoanApplicationClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the LoanApplication entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *LoanApplication) Unwrap() *LoanApplication {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: LoanApplication is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *LoanApplication) String() string {
	var builder strings.Builder
	builder.WriteString("LoanApplication(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("user_id=")
	builder.WriteString(_m.UserID)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", _m.Amount))
	builder.WriteString(", ")
	builder.WriteString("purpose=")
	builder.WriteString(_m.Purpose)
	builder.WriteString(", ")
	builder.WriteString("financial_info=")
	builder.WriteString(_m.FinancialInfo)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("approval_progress=")
	builder.WriteString(fmt.Sprintf("%v", _m.ApprovalProgress))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LoanApplications is a parsable slice of LoanApplication.
type LoanApplications []*LoanApplication
