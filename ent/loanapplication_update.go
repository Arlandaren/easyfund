// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Arlandaren/easyfund/ent/loanapplication"
	"github.com/Arlandaren/easyfund/ent/predicate"
)

// LoanApplicationUpdate is the builder for updating LoanApplication entities.
type LoanApplicationUpdate struct {
	config
	hooks    []Hook
	mutation *LoanApplicationMutation
}

// Where appends a list predicates to the LoanApplicationUpdate builder.
func (_u *LoanApplicationUpdate) Where(ps ...predicate.LoanApplication) *LoanApplicationUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *LoanApplicationUpdate) SetUserID(v string) *LoanApplicationUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *LoanApplicationUpdate) SetNillableUserID(v *string) *LoanApplicationUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetAmount sets the "amount" field.
func (_u *LoanApplicationUpdate) SetAmount(v float64) *LoanApplicationUpdate {
	_u.mutation.ResetAmount()
	_u.mutation.SetAmount(v)
	return _u
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_u *LoanApplicationUpdate) SetNillableAmount(v *float64) *LoanApplicationUpdate {
	if v != nil {
		_u.SetAmount(*v)
	}
	return _u
}

// AddAmount adds value to the "amount" field.
func (_u *LoanApplicationUpdate) AddAmount(v float64) *LoanApplicationUpdate {
	_u.mutation.AddAmount(v)
	return _u
}

// SetPurpose sets the "purpose" field.
func (_u *LoanApplicationUpdate) SetPurpose(v string) *LoanApplicationUpdate {
	_u.mutation.SetPurpose(v)
	return _u
}

// SetNillablePurpose sets the "purpose" field if the given value is not nil.
func (_u *LoanApplicationUpdate) SetNillablePurpose(v *string) *LoanApplicationUpdate {
	if v != nil {
		_u.SetPurpose(*v)
	}
	return _u
}

// SetFinancialInfo sets the "financial_info" field.
func (_u *LoanApplicationUpdate) SetFinancialInfo(v string) *LoanApplicationUpdate {
	_u.mutation.SetFinancialInfo(v)
	return _u
}

// SetNillableFinancialInfo sets the "financial_info" field if the given value is not nil.
func (_u *LoanApplicationUpdate) SetNillableFinancialInfo(v *string) *LoanApplicationUpdate {
	if v != nil {
		_u.SetFinancialInfo(*v)
	}
	return _u
}

// ClearFinancialInfo clears the value of the "financial_info" field.
func (_u *LoanApplicationUpdate) ClearFinancialInfo() *LoanApplicationUpdate {
	_u.mutation.ClearFinancialInfo()
	return _u
}

// SetStatus sets the "status" field.
func (_u *LoanApplicationUpdate) SetStatus(v loanapplication.Status) *LoanApplicationUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *LoanApplicationUpdate) SetNillableStatus(v *loanapplication.Status) *LoanApplicationUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetApprovalProgress sets the "approval_progress" field.
func (_u *LoanApplicationUpdate) SetApprovalProgress(v map[string]string) *LoanApplicationUpdate {
	_u.mutation.SetApprovalProgress(v)
	return _u
}

// ClearApprovalProgress clears the value of the "approval_progress" field.
func (_u *LoanApplicationUpdate) ClearApprovalProgress() *LoanApplicationUpdate {
	_u.mutation.ClearApprovalProgress()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *LoanApplicationUpdate) SetCreatedAt(v time.Time) *LoanApplicationUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *LoanApplicationUpdate) SetNillableCreatedAt(v *time.Time) *LoanApplicationUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *LoanApplicationUpdate) SetUpdatedAt(v time.Time) *LoanApplicationUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the LoanApplicationMutation object of the builder.
func (_u *LoanApplicationUpdate) Mutation() *LoanApplicationMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *LoanApplicationUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *LoanApplicationUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *LoanApplicationUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *LoanApplicationUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *LoanApplicationUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := loanapplication.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *LoanApplicationUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := loanapplication.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "LoanApplication.status": %w`, err)}
		}
	}
	return nil
}

func (_u *LoanApplicationUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(loanapplication.Table, loanapplication.Columns, sqlgraph.NewFieldSpec(loanapplication.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(loanapplication.FieldUserID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Amount(); ok {
		_spec.SetField(loanapplication.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedAmount(); ok {
		_spec.AddField(loanapplication.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Purpose(); ok {
		_spec.SetField(loanapplication.FieldPurpose, field.TypeString, value)
	}
	if value, ok := _u.mutation.FinancialInfo(); ok {
		_spec.SetField(loanapplication.FieldFinancialInfo, field.TypeString, value)
	}
	if _u.mutation.FinancialInfoCleared() {
		_spec.ClearField(loanapplication.FieldFinancialInfo, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(loanapplication.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ApprovalProgress(); ok {
		_spec.SetField(loanapplication.FieldApprovalProgress, field.TypeJSON, value)
	}
	if _u.mutation.ApprovalProgressCleared() {
		_spec.ClearField(loanapplication.FieldApprovalProgress, field.TypeJSON)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(loanapplication.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(loanapplication.FieldUpdatedAt, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loanapplication.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// LoanApplicationUpdateOne is the builder for updating a single LoanApplication entity.
type LoanApplicationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LoanApplicationMutation
}

// SetUserID sets the "user_id" field.
func (_u *LoanApplicationUpdateOne) SetUserID(v string) *LoanApplicationUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *LoanApplicationUpdateOne) SetNillableUserID(v *string) *LoanApplicationUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetAmount sets the "amount" field.
func (_u *LoanApplicationUpdateOne) SetAmount(v float64) *LoanApplicationUpdateOne {
	_u.mutation.ResetAmount()
	_u.mutation.SetAmount(v)
	return _u
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_u *LoanApplicationUpdateOne) SetNillableAmount(v *float64) *LoanApplicationUpdateOne {
	if v != nil {
		_u.SetAmount(*v)
	}
	return _u
}

// AddAmount adds value to the "amount" field.
func (_u *LoanApplicationUpdateOne) AddAmount(v float64) *LoanApplicationUpdateOne {
	_u.mutation.AddAmount(v)
	return _u
}

// SetPurpose sets the "purpose" field.
func (_u *LoanApplicationUpdateOne) SetPurpose(v string) *LoanApplicationUpdateOne {
	_u.mutation.SetPurpose(v)
	return _u
}

// SetNillablePurpose sets the "purpose" field if the given value is not nil.
func (_u *LoanApplicationUpdateOne) SetNillablePurpose(v *string) *LoanApplicationUpdateOne {
	if v != nil {
		_u.SetPurpose(*v)
	}
	return _u
}

// SetFinancialInfo sets the "financial_info" field.
func (_u *LoanApplicationUpdateOne) SetFinancialInfo(v string) *LoanApplicationUpdateOne {
	_u.mutation.SetFinancialInfo(v)
	return _u
}

// SetNillableFinancialInfo sets the "financial_info" field if the given value is not nil.
func (_u *LoanApplicationUpdateOne) SetNillableFinancialInfo(v *string) *LoanApplicationUpdateOne {
	if v != nil {
		_u.SetFinancialInfo(*v)
	}
	return _u
}

// ClearFinancialInfo clears the value of the "financial_info" field.
func (_u *LoanApplicationUpdateOne) ClearFinancialInfo() *LoanApplicationUpdateOne {
	_u.mutation.ClearFinancialInfo()
	return _u
}

// SetStatus sets the "status" field.
func (_u *LoanApplicationUpdateOne) SetStatus(v loanapplication.Status) *LoanApplicationUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *LoanApplicationUpdateOne) SetNillableStatus(v *loanapplication.Status) *LoanApplicationUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetApprovalProgress sets the "approval_progress" field.
func (_u *LoanApplicationUpdateOne) SetApprovalProgress(v map[string]string) *LoanApplicationUpdateOne {
	_u.mutation.SetApprovalProgress(v)
	return _u
}

// ClearApprovalProgress clears the value of the "approval_progress" field.
func (_u *LoanApplicationUpdateOne) ClearApprovalProgress() *LoanApplicationUpdateOne {
	_u.mutation.ClearApprovalProgress()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *LoanApplicationUpdateOne) SetCreatedAt(v time.Time) *LoanApplicationUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *LoanApplicationUpdateOne) SetNillableCreatedAt(v *time.Time) *LoanApplicationUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *LoanApplicationUpdateOne) SetUpdatedAt(v time.Time) *LoanApplicationUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the LoanApplicationMutation object of the builder.
func (_u *LoanApplicationUpdateOne) Mutation() *LoanApplicationMutation {
	return _u.mutation
}

// Where appends a list predicates to the LoanApplicationUpdate builder.
func (_u *LoanApplicationUpdateOne) Where(ps ...predicate.LoanApplication) *LoanApplicationUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *LoanApplicationUpdateOne) Select(field string, fields ...string) *LoanApplicationUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated LoanApplication entity.
func (_u *LoanApplicationUpdateOne) Save(ctx context.Context) (*LoanApplication, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *LoanApplicationUpdateOne) SaveX(ctx context.Context) *LoanApplication {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *LoanApplicationUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *LoanApplicationUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *LoanApplicationUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := loanapplication.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *LoanApplicationUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := loanapplication.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "LoanApplication.status": %w`, err)}
		}
	}
	return nil
}

func (_u *LoanApplicationUpdateOne) sqlSave(ctx context.Context) (_node *LoanApplication, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(loanapplication.Table, loanapplication.Columns, sqlgraph.NewFieldSpec(loanapplication.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LoanApplication.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, loanapplication.FieldID)
		for _, f := range fields {
			if !loanapplication.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != loanapplication.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(loanapplication.FieldUserID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Amount(); ok {
		_spec.SetField(loanapplication.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedAmount(); ok {
		_spec.AddField(loanapplication.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Purpose(); ok {
		_spec.SetField(loanapplication.FieldPurpose, field.TypeString, value)
	}
	if value, ok := _u.mutation.FinancialInfo(); ok {
		_spec.SetField(loanapplication.FieldFinancialInfo, field.TypeString, value)
	}
	if _u.mutation.FinancialInfoCleared() {
		_spec.ClearField(loanapplication.FieldFinancialInfo, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(loanapplication.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ApprovalProgress(); ok {
		_spec.SetField(loanapplication.FieldApprovalProgress, field.TypeJSON, value)
	}
	if _u.mutation.ApprovalProgressCleared() {
		_spec.ClearField(loanapplication.FieldApprovalProgress, field.TypeJSON)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(loanapplication.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(loanapplication.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &LoanApplication{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loanapplication.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
