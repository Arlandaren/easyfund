// Code generated by ent, DO NOT EDIT.

package loanapplication

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Arlandaren/easyfund/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldContainsFold(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldEQ(FieldUserID, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldEQ(FieldAmount, v))
}

// Purpose applies equality check predicate on the "purpose" field. It's identical to PurposeEQ.
func Purpose(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldEQ(FieldPurpose, v))
}

// FinancialInfo applies equality check predicate on the "financial_info" field. It's identical to FinancialInfoEQ.
func FinancialInfo(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldEQ(FieldFinancialInfo, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldContainsFold(FieldUserID, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldLTE(FieldAmount, v))
}

// PurposeEQ applies the EQ predicate on the "purpose" field.
func PurposeEQ(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldEQ(FieldPurpose, v))
}

// PurposeNEQ applies the NEQ predicate on the "purpose" field.
func PurposeNEQ(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldNEQ(FieldPurpose, v))
}

// PurposeIn applies the In predicate on the "purpose" field.
func PurposeIn(vs ...string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldIn(FieldPurpose, vs...))
}

// PurposeNotIn applies the NotIn predicate on the "purpose" field.
func PurposeNotIn(vs ...string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldNotIn(FieldPurpose, vs...))
}

// PurposeGT applies the GT predicate on the "purpose" field.
func PurposeGT(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldGT(FieldPurpose, v))
}

// PurposeGTE applies the GTE predicate on the "purpose" field.
func PurposeGTE(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldGTE(FieldPurpose, v))
}

// PurposeLT applies the LT predicate on the "purpose" field.
func PurposeLT(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldLT(FieldPurpose, v))
}

// PurposeLTE applies the LTE predicate on the "purpose" field.
func PurposeLTE(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldLTE(FieldPurpose, v))
}

// PurposeContains applies the Contains predicate on the "purpose" field.
func PurposeContains(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldContains(FieldPurpose, v))
}

// PurposeHasPrefix applies the HasPrefix predicate on the "purpose" field.
func PurposeHasPrefix(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldHasPrefix(FieldPurpose, v))
}

// PurposeHasSuffix applies the HasSuffix predicate on the "purpose" field.
func PurposeHasSuffix(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldHasSuffix(FieldPurpose, v))
}

// PurposeEqualFold applies the EqualFold predicate on the "purpose" field.
func PurposeEqualFold(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldEqualFold(FieldPurpose, v))
}

// PurposeContainsFold applies the ContainsFold predicate on the "purpose" field.
func PurposeContainsFold(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldContainsFold(FieldPurpose, v))
}

// FinancialInfoEQ applies the EQ predicate on the "financial_info" field.
func FinancialInfoEQ(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldEQ(FieldFinancialInfo, v))
}

// FinancialInfoNEQ applies the NEQ predicate on the "financial_info" field.
func FinancialInfoNEQ(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldNEQ(FieldFinancialInfo, v))
}

// FinancialInfoIn applies the In predicate on the "financial_info" field.
func FinancialInfoIn(vs ...string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldIn(FieldFinancialInfo, vs...))
}

// FinancialInfoNotIn applies the NotIn predicate on the "financial_info" field.
func FinancialInfoNotIn(vs ...string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldNotIn(FieldFinancialInfo, vs...))
}

// FinancialInfoGT applies the GT predicate on the "financial_info" field.
func FinancialInfoGT(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldGT(FieldFinancialInfo, v))
}

// FinancialInfoGTE applies the GTE predicate on the "financial_info" field.
func FinancialInfoGTE(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldGTE(FieldFinancialInfo, v))
}

// FinancialInfoLT applies the LT predicate on the "financial_info" field.
func FinancialInfoLT(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldLT(FieldFinancialInfo, v))
}

// FinancialInfoLTE applies the LTE predicate on the "financial_info" field.
func FinancialInfoLTE(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldLTE(FieldFinancialInfo, v))
}

// FinancialInfoContains applies the Contains predicate on the "financial_info" field.
func FinancialInfoContains(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldContains(FieldFinancialInfo, v))
}

// FinancialInfoHasPrefix applies the HasPrefix predicate on the "financial_info" field.
func FinancialInfoHasPrefix(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldHasPrefix(FieldFinancialInfo, v))
}

// FinancialInfoHasSuffix applies the HasSuffix predicate on the "financial_info" field.
func FinancialInfoHasSuffix(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldHasSuffix(FieldFinancialInfo, v))
}

// FinancialInfoIsNil applies the IsNil predicate on the "financial_info" field.
func FinancialInfoIsNil() predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldIsNull(FieldFinancialInfo))
}

// FinancialInfoNotNil applies the NotNil predicate on the "financial_info" field.
func FinancialInfoNotNil() predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldNotNull(FieldFinancialInfo))
}

// FinancialInfoEqualFold applies the EqualFold predicate on the "financial_info" field.
func FinancialInfoEqualFold(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldEqualFold(FieldFinancialInfo, v))
}

// FinancialInfoContainsFold applies the ContainsFold predicate on the "financial_info" field.
func FinancialInfoContainsFold(v string) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldContainsFold(FieldFinancialInfo, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldNotIn(FieldStatus, vs...))
}

// ApprovalProgressIsNil applies the IsNil predicate on the "approval_progress" field.
func ApprovalProgressIsNil() predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldIsNull(FieldApprovalProgress))
}

// ApprovalProgressNotNil applies the NotNil predicate on the "approval_progress" field.
func ApprovalProgressNotNil() predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldNotNull(FieldApprovalProgress))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.LoanApplication {
	return predicate.LoanApplication(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LoanApplication) predicate.LoanApplication {
	return predicate.LoanApplication(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LoanApplication) predicate.LoanApplication {
	return predicate.LoanApplication(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LoanApplication) predicate.LoanApplication {
	return predicate.LoanApplication(sql.NotPredicates(p))
}
