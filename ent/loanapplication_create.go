// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Arlandaren/easyfund/ent/loanapplication"
)

// LoanApplicationCreate is the builder for creating a LoanApplication entity.
type LoanApplicationCreate struct {
	config
	mutation *LoanApplicationMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (_c *LoanApplicationCreate) SetUserID(v string) *LoanApplicationCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetAmount sets the "amount" field.
func (_c *LoanApplicationCreate) SetAmount(v float64) *LoanApplicationCreate {
	_c.mutation.SetAmount(v)
	return _c
}

// SetPurpose sets the "purpose" field.
func (_c *LoanApplicationCreate) SetPurpose(v string) *LoanApplicationCreate {
	_c.mutation.SetPurpose(v)
	return _c
}

// SetFinancialInfo sets the "financial_info" field.
func (_c *LoanApplicationCreate) SetFinancialInfo(v string) *LoanApplicationCreate {
	_c.mutation.SetFinancialInfo(v)
	return _c
}

// SetNillableFinancialInfo sets the "financial_info" field if the given value is not nil.
func (_c *LoanApplicationCreate) SetNillableFinancialInfo(v *string) *LoanApplicationCreate {
	if v != nil {
		_c.SetFinancialInfo(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *LoanApplicationCreate) SetStatus(v loanapplication.Status) *LoanApplicationCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *LoanApplicationCreate) SetNillableStatus(v *loanapplication.Status) *LoanApplicationCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetApprovalProgress sets the "approval_progress" field.
func (_c *LoanApplicationCreate) SetApprovalProgress(v map[string]string) *LoanApplicationCreate {
	_c.mutation.SetApprovalProgress(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *LoanApplicationCreate) SetCreatedAt(v time.Time) *LoanApplicationCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *LoanApplicationCreate) SetNillableCreatedAt(v *time.Time) *LoanApplicationCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *LoanApplicationCreate) SetUpdatedAt(v time.Time) *LoanApplicationCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *LoanApplicationCreate) SetNillableUpdatedAt(v *time.Time) *LoanApplicationCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *LoanApplicationCreate) SetID(v string) *LoanApplicationCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the LoanApplicationMutation object of the builder.
func (_c *LoanApplicationCreate) Mutation() *LoanApplicationMutation {
	return _c.mutation
}

// Save creates the LoanApplication in the database.
func (_c *LoanApplicationCreate) Save(ctx context.Context) (*LoanApplication, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *LoanApplicationCreate) SaveX(ctx context.Context) *LoanApplication {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *LoanApplicationCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *LoanApplicationCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *LoanApplicationCreate) defaults() {
	if _, ok := _c.mutation.Status(); !ok {
		v := loanapplication.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := loanapplication.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := loanapplication.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *LoanApplicationCreate) check() error {
	if _, ok := _c.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "LoanApplication.user_id"`)}
	}
	if _, ok := _c.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "LoanApplication.amount"`)}
	}
	if _, ok := _c.mutation.Purpose(); !ok {
		return &ValidationError{Name: "purpose", err: errors.New(`ent: missing required field "LoanApplication.purpose"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "LoanApplication.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := loanapplication.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "LoanApplication.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LoanApplication.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LoanApplication.updated_at"`)}
	}
	return nil
}

func (_c *LoanApplicationCreate) sqlSave(ctx context.Context) (*LoanApplication, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected LoanApplication.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *LoanApplicationCreate) createSpec() (*LoanApplication, *sqlgraph.CreateSpec) {
	var (
		_node = &LoanApplication{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(loanapplication.Table, sqlgraph.NewFieldSpec(loanapplication.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.UserID(); ok {
		_spec.SetField(loanapplication.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := _c.mutation.Amount(); ok {
		_spec.SetField(loanapplication.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := _c.mutation.Purpose(); ok {
		_spec.SetField(loanapplication.FieldPurpose, field.TypeString, value)
		_node.Purpose = value
	}
	if value, ok := _c.mutation.FinancialInfo(); ok {
		_spec.SetField(loanapplication.FieldFinancialInfo, field.TypeString, value)
		_node.FinancialInfo = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(loanapplication.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.ApprovalProgress(); ok {
		_spec.SetField(loanapplication.FieldApprovalProgress, field.TypeJSON, value)
		_node.ApprovalProgress = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(loanapplication.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(loanapplication.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// LoanApplicationCreateBulk is the builder for creating many LoanApplication entities in bulk.
type LoanApplicationCreateBulk struct {
	config
	err      error
	builders []*LoanApplicationCreate
}

// Save creates the LoanApplication entities in the database.
func (_c *LoanApplicationCreateBulk) Save(ctx context.Context) ([]*LoanApplication, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*LoanApplication, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LoanApplicationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *LoanApplicationCreateBulk) SaveX(ctx context.Context) []*LoanApplication {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *LoanApplicationCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *LoanApplicationCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
